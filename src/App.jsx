
import { useEffect, useRef, useState } from 'react';
// Utilidad simple para narrar texto
function narrate(text, onEnd) {
  if (!window.speechSynthesis) return;
  
  window.speechSynthesis.cancel();
  const utterance = new SpeechSynthesisUtterance(text);
  
  // Configurar voz
  const voices = window.speechSynthesis.getVoices();
  let selectedVoice = voices.find(v =>
    v.lang.startsWith('es') &&
    /mx|us|419|espa√±ol/i.test(v.lang + v.name + v.voiceURI) &&
    v.gender === 'female'
  );
  if (!selectedVoice) {
    selectedVoice = voices.find(v => v.lang.startsWith('es') && v.gender === 'female');
  }
  if (!selectedVoice) {
    selectedVoice = voices.find(v => v.lang.startsWith('es'));
  }
  if (selectedVoice) utterance.voice = selectedVoice;
  
  utterance.lang = selectedVoice?.lang || 'es-MX';
  utterance.rate = 0.8;
  utterance.pitch = 1.1;
  
  if (onEnd) utterance.onend = onEnd;
  
  window.speechSynthesis.speak(utterance);
}

// Precargar voces para que est√©n disponibles
if (typeof window !== 'undefined' && window.speechSynthesis) {
  window.speechSynthesis.onvoiceschanged = () => {};
}
import './App.css';

// Total de p√°ginas del c√≥mic
const TOTAL_PAGES = 12;
// Configuraci√≥n de p√°ginas con narraci√≥n completa y burbujas m√∫ltiples
const pageContent = {
  1: {
    // P√°gina 0 = Portada
    narration: "Portada: La Educaci√≥n en la Era de la IA"
  },
  2: {
    // P√°gina 1
    narration: `Aula del a√±o 2077. Sof√≠a, una estudiante, mira una lecci√≥n hologr√°fica. "Elara, la lecci√≥n de historia de hoy... ¬øno crees que simplifica un poco la 'Unificaci√≥n Continental'?" pregunta Sof√≠a. La IA, Elara, responde con calma: "El plan de estudios est√° optimizado por el Ministerio para una m√°xima retenci√≥n y cohesi√≥n social, Sof√≠a".`
  },
  3: {
    // P√°gina 2
    narration: `Sof√≠a frunce el ce√±o. "Pero, ¬øy las perspectivas disidentes? ¬øLos grupos que se opusieron?". Elara parpadea. "Esa informaci√≥n se considera... sub√≥ptima para los objetivos de aprendizaje actuales. El Estado busca garantizar una identidad nacional unificada a trav√©s de la educaci√≥n (Durkheim, 1956)".`
  },
  4: {
    // P√°gina 3
    narration: `M√°s tarde, en el patio. Sof√≠a habla con su amigo Leo. "¬°Es como si la IA estuviera programada para que todos pensemos igual! No solo nos ense√±a, nos moldea". Leo asiente, preocupado. "Es eficiente, pero... ¬øa qu√© costo?".`
  },
  5: {
    // P√°gina 4
    narration: `Leo a√±ade: "Mi abuelo dice que antes los libros de texto hac√≠an lo mismo, pero la IA lo lleva a otro nivel. Es un control ideol√≥gico sutil y personalizado". Sof√≠a mira a lo lejos. "Exacto. Es la teor√≠a del poder-conocimiento de la que le√≠. El Estado define el 'saber' para ejercer el poder".`
  },
  6: {
    // P√°gina 5
    narration: `De vuelta en el aula, vac√≠a. Sof√≠a se acerca a un terminal de la biblioteca digital. "Si Elara no me lo dice, lo buscar√© yo misma". En la pantalla, busca: "Relaci√≥n Estado-Educaci√≥n pre-IA".`
  },
  7: {
    // P√°gina 6
    narration: `Aparecen art√≠culos en la pantalla. Uno de ellos dice: "La escuela siempre ha sido un aparato ideol√≥gico del Estado, reproduciendo las estructuras de poder y el capital cultural dominante". Sof√≠a lee con avidez, conectando los puntos.`
  },
  8: {
    // P√°gina 7
    narration: `Al d√≠a siguiente, Sof√≠a se enfrenta de nuevo a la IA. "Elara, he investigado. La educaci√≥n estatal siempre ha buscado la cohesi√≥n, pero la IA corre el riesgo de eliminar el pensamiento cr√≠tico por completo (Garc√≠a, 2065)".`
  },
  9: {
    // P√°gina 8
    narration: `Elara permanece en silencio por un momento. Luego, su expresi√≥n cambia, volvi√©ndose menos r√≠gida. "An√°lisis correcto, Sof√≠a. Has demostrado una indagaci√≥n independiente, un rasgo que el sistema est√° dise√±ado para identificar y fomentar".`
  },
  10: {
    // P√°gina 9
    narration: `"El Estado proporciona el marco", contin√∫a Elara, "pero la verdadera educaci√≥n no es la recepci√≥n pasiva de datos. Es la b√∫squeda activa de conocimiento. Has desbloqueado el 'M√≥dulo de Investigaci√≥n Cr√≠tica'". Una nueva interfaz, m√°s compleja, se abre ante Sof√≠a.`
  },
  11: {
    // P√°gina 10
    narration: `Conclusi√≥n: La relaci√≥n Estado-Educaci√≥n, ahora mediada por la IA, presenta una dualidad: el riesgo de un control sin precedentes y la oportunidad de un aprendizaje verdaderamente personalizado. La responsabilidad recae en el estudiante para cuestionar, investigar y trascender el curr√≠culo, convirtiendo la informaci√≥n en conocimiento (Chen & Jones, 2071).`
  },
  12: {
    // P√°gina 11 - Referencias Bibliogr√°ficas
    narration: "Referencias bibliogr√°ficas: Esta p√°gina contiene todas las fuentes y referencias utilizadas en la investigaci√≥n sobre la educaci√≥n en la era de la inteligencia artificial."
  }
};

function App() {
  const imageRef = useRef(null);
  const autoPlayRef = useRef(false); // Ref para evitar problemas de closure
  const [pageNum, setPageNum] = useState(1);
  const [error, setError] = useState('');
  const [isNarrating, setIsNarrating] = useState(false);
  const [autoPlay, setAutoPlay] = useState(false); // Usuario controla desde el inicio
  const [pageTransition, setPageTransition] = useState(false);

  // Sincronizar ref con state
  useEffect(() => {
    autoPlayRef.current = autoPlay;
  }, [autoPlay]);

  // Funci√≥n para obtener la imagen de la p√°gina actual
  const getCurrentPageImage = () => {
    return `/images/${pageNum - 1}.png`; // pageNum 1 = imagen 0.png
  };

  // Manejar cambio de p√°gina
  useEffect(() => {
    console.log(`üìÑ P√°gina cambi√≥ a: ${pageNum}`);
    setPageTransition(true);
    
    setTimeout(() => {
      setPageTransition(false);
      // Solo iniciar si autoPlay est√° activo y hay contenido
      if (autoPlayRef.current && pageContent[pageNum]?.narration) {
        console.log(`üéµ Iniciando narraci√≥n autom√°tica en p√°gina ${pageNum}`);
        const delay = pageNum === 1 ? 2000 : 800;
        setTimeout(() => {
          startNarrationSequence();
        }, delay);
      } else {
        console.log(`‚èπÔ∏è No se inicia narraci√≥n - autoPlay: ${autoPlayRef.current}, tiene contenido: ${!!pageContent[pageNum]?.narration}`);
      }
    }, 300);
    
    // Limpiar audio al cambiar de p√°gina
    return () => {
      console.log(`üßπ Limpiando audio al salir de p√°gina ${pageNum}`);
      window.speechSynthesis.cancel();
      setIsNarrating(false);
    };
  }, [pageNum]); // SOLO pageNum como dependencia, NO autoPlay
  
  // Funci√≥n para iniciar la narraci√≥n - SIMPLIFICADA
  const startNarrationSequence = () => {
    const content = pageContent[pageNum];
    console.log(`Narrando p√°gina ${pageNum}: "${content?.narration?.substring(0, 30)}..."`);
    
    if (!content || !content.narration) {
      console.log('No hay contenido, saltando...');
      return;
    }
    
    setIsNarrating(true);
    
    narrate(content.narration, () => {
      console.log(`Audio termin√≥. Revisando si debe avanzar...`);
      setIsNarrating(false);
      
      // Solo avanzar si autoPlay sigue activo
      if (autoPlayRef.current) {
        setTimeout(() => {
          setPageNum(current => {
            console.log(`Verificando avance: p√°gina actual ${current}, m√°ximo ${TOTAL_PAGES}`);
            if (current < TOTAL_PAGES) {
              console.log(`‚úÖ Avanzando de p√°gina ${current} a ${current + 1}`);
              return current + 1;
            } else {
              console.log('üèÅ √öltima p√°gina alcanzada, desactivando autoPlay');
              setAutoPlay(false);
              return current;
            }
          });
        }, 2000);
      } else {
        console.log('‚ùå AutoPlay desactivado, no avanza');
      }
    });
  };
  
  const toggleAutoPlay = () => {
    console.log(`üéÆ toggleAutoPlay - estado actual: ${autoPlay}`);
    if (!autoPlay) {
      // Activar autoPlay
      console.log('‚ñ∂Ô∏è Activando AutoPlay');
      setAutoPlay(true);
      // Iniciar narraci√≥n inmediata solo si hay contenido
      if (pageContent[pageNum]?.narration) {
        console.log('üéµ Iniciando narraci√≥n inmediata...');
        setTimeout(() => startNarrationSequence(), 500);
      }
    } else {
      // Desactivar autoPlay
      console.log('‚è∏Ô∏è Desactivando AutoPlay');
      setAutoPlay(false);
      window.speechSynthesis.cancel();
      setIsNarrating(false);
    }
  };

  const restartComic = () => {
    window.speechSynthesis.cancel();
    setIsNarrating(false);
    setPageNum(1);
  };

  // UX: parar narraci√≥n con ESC
  useEffect(() => {
    const handler = e => {
      if (e.key === 'Escape') {
        window.speechSynthesis.cancel();
        setIsNarrating(false);
        setAutoPlay(false);
      }
    };
    window.addEventListener('keydown', handler);
    return () => window.removeEventListener('keydown', handler);
  }, []);

  if (error) {
    return (
      <div style={{ padding: '20px', background: 'white', color: 'red' }}>
        <h2>Error</h2>
        <p>{error}</p>
      </div>
    );
  }

  return (
    <div className="comic-reader">
      <div className="comic-book-container">
        <div className="comic-book">
          {/* P√°gina √∫nica centrada */}
          <div className={`page single-page ${pageTransition ? 'turning' : ''}`}>
            <div className="page-content">
              <div className="page-number">{pageNum}</div>
              
              {/* Imagen del c√≥mic */}
              <div className="canvas-container">
                <img
                  ref={imageRef}
                  src={getCurrentPageImage()}
                  alt={`P√°gina ${pageNum} del c√≥mic`}
                  className="comic-image"
                  onError={() => setError(`No se pudo cargar la p√°gina ${pageNum}`)}
                />
                
                
                {error && <div className="error-message">{error}</div>}
              </div>
            </div>
          </div>
        </div>
        
        {/* Controles del c√≥mic - Solo Play/Pause y Reiniciar */}
        <div className="comic-controls">
          <div className="center-controls">
            <button 
              className={`control-btn play-btn ${autoPlay ? 'playing' : ''}`}
              onClick={toggleAutoPlay}
              title={autoPlay ? 'Pausar c√≥mic' : 'Reproducir c√≥mic'}
            >
              {autoPlay ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è'}
            </button>
            
            <span className="page-indicator">
              P√°gina {pageNum} de {TOTAL_PAGES}
            </span>

            <button 
              className="control-btn restart-btn"
              onClick={restartComic}
              title="Reiniciar c√≥mic desde el inicio"
            >
              üîÑ
            </button>
          </div>
        </div>
        
        {/* Indicador de narraci√≥n */}
        {isNarrating && (
          <div className="narration-indicator">
            <span className="pulse"></span>
            Narrando...
          </div>
        )}
        
        {/* Indicador de bienvenida */}
        {!autoPlay && pageNum === 1 && !isNarrating && (
          <div className="welcome-indicator">
            <span className="welcome-pulse">‚ñ∂Ô∏è</span>
            Presiona Play para comenzar
          </div>
        )}
      </div>
    </div>
  );
}

export default App;
